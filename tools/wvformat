#!/usr/bin/perl -w
#
# WvTest:
#   Copyright (C)2007-2009 Versabanq Innovations Inc. and contributors.
#       Licensed under the GNU Library General Public License, version 2.
#       See the included file named LICENSE for license information.
#
use strict;
use Getopt::Long;

sub usage() {
    print STDERR "Usage: $0 [-vs] <file>\n";
    exit 127;
}

my ($verbose, $summary, $limit_lines);

GetOptions (
    "verbose|v" 	     => \$verbose,
    "summary|s"		     => \$summary,
    "before-failure|b=i"     => \$limit_lines,
    ) or usage();

my $istty = -t STDOUT && $ENV{'TERM'} ne "dumb";
my $columns;
if ($istty) {
    $columns = `tput cols`;
} else {
    $columns = $ENV{'COLUMNS'} || 80;
}

my @log = ();
my ($file, $sect);
my ($gpasses, $gfails) = (0,0);
my ($lpasses, $lfails) = (0,0);
my ($tpasses, $tfails) = (0,0);

sub colourize($$)
{
    my ($column, $result) = @_;
    my $pass = ($result eq "ok");

    my $begcolour = $istty ? ($pass ? "\e[32;1m" : "\e[31;1m") : "";
    my $endcolour = $istty ? "\e[0m" : "";

    my $dots = $columns - 15 - $column%$columns;
    $dots += $columns if ($dots < 0);
    my $leader = "."x$dots;
    return "$begcolour$leader $result$endcolour";
}

sub highlight($)
{
    my $msg = shift;
    my $begcolour = $istty ? "\e[1m\e[4m" : "";
    my $endcolour = $istty ? "\e[0m" : "";
    return "$begcolour$msg$endcolour";
}

sub resultline($$$)
{
    my ($prefix, $name, $result) = @_;
    if (!defined $prefix) { $prefix = ''; }
    return sprintf("$prefix! %s %s", $name, colourize(length($prefix)+2+length($name)+1, $result));
}

sub print_and_clear_log()
{
    print "v"x($columns-1) . "\n"; # Top marker
    my @log2print = ();
    my $skipped = 0;
    foreach (@log) {
	if (/^(\([0-9]+\) (#   )?)?!\s*(.*?)\s+(\S+)\s*$/) {
	    my ($prefix, $name, $result) = ($1, $3, $4);
	    push @log2print, resultline($prefix, $name, $result);
	    if ($result ne "ok") {
		print "wvformat: skipped $skipped lines\n" if $skipped;
		print join("\n", @log2print) . "\n";
		@log2print = ();
		$skipped = 0;
	    }
	} else {
	    push @log2print, $_;
	}
	while (defined $limit_lines && scalar(@log2print) > $limit_lines) {
	    shift @log2print;
	    $skipped++;
	}
    }
    print "wvformat: skipped $skipped lines\n" if $skipped;
    print join("\n", @log2print) . "\n";
    print "^"x($columns-1) . "\n"; # Bottom marker
    @log = ();
}

sub print_test_summary()
{
    if (!$verbose) {
	print(resultline("", sprintf("%s %s [%d/%d]", $file, $sect, $lpasses, $lpasses+$lfails),
			 $lfails ? "FAILED" : "ok") . "\n");
	print_and_clear_log() if ($lfails && !$summary);
    }
    if ($lfails) { $tfails++; }
    else 	 { $tpasses++; }
    ($lpasses, $lfails) = (0,0);
}

my $startup = 1;

while (<>)
{
    chomp;
    s/\r//g;

    if (/^(\([0-9]+\) )?\s*Testing "(.*)" in (.*):\s*$/)
    {
	print_test_summary() unless $startup;
	$startup = 0;
	(undef, $sect, $file) = ($1, $2, $3);
	@log = ();
	if ($verbose) {
	    print highlight($_), "\n";
	}
    }
    elsif (/^(\([0-9]+\) (#   )?)?!\s*(.*?)\s+(\S+)\s*$/)
    {
	my ($prefix, $name, $result) = ($1, $3, $4);

	if ($startup) {
	    $file = "";
	    $sect = "Startup";
	    $startup = 0;
	}

	if ($verbose) {
	    print resultline($prefix, $name, $result) . "\n";
	} else {
	    push @log, $_;
	}

	if ($result eq "ok") {
	    $gpasses++;
	    $lpasses++;
	} else {
	    $gfails++;
	    $lfails++;
	}
    }
    else
    {
	if ($verbose) {
	    print "$_\n";
	} else {
	    push @log, $_;
	}
    }
}
if (!$verbose) {
    if (!$startup) {
	print_test_summary();
    } else {
	print_and_clear_log();
    }
}

my $gtotal = $gpasses+$gfails;
my $ttotal = $tpasses+$tfails;
printf("\nSummary: %d test%s, %d failure%s".
       "\n         %d check%s, %d failure%s\n",
    $ttotal, $ttotal==1 ? "" : "s",
    $tfails, $tfails==1 ? "" : "s",
    $gtotal, $gtotal==1 ? "" : "s",
    $gfails, $gfails==1 ? "" : "s");
exit(0);
